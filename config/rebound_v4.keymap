/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/modifiers.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping_term_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
	behaviors {
        lk: layer_keytap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_KEYTAP";
            #binding-cells = <2>;
            tapping_term_ms = <275>;
            flavor = "tap-preferred";
            bindings = <&to>, <&kp>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
     
// -------------------------------------------------------------------------------------
// |    TAB      |    Q      |   W   |    E          |  R     |    T      |                   |   Y          |    U      |    I      |   O       |   P          |   \   |
// |   CAPS      |  L1mo  A  |   S   |   L2to D      | L1to F |    G      | | OPTION       |  |   H          |  L1to  J  |   L2to K  |   L       |  L1mo ;      |  '    |
// |   LSHIFT    |    Z LSHFT|   X   |    C          |  V     |    B      | | CTRL ESC     |  |   N          |    M      |    ,      |   .       |   / RSHIFT   | RSHIFT|
// |   moment 1  |    `      |  TO 2 |  LEFT         | BSPACE |  DELETE   | | CMD SPACE    |  |  ENTER       |    SPACE  |   UP/DOWN |   [       |   ]          |moment1|
//                         					  
		bindings = <
   &kp TAB       &kp Q        &kp W  &kp E           &kp R     &kp T                         &kp Y           &kp U       &kp I       &kp O       &kp P          &kp BSLH
   &kp CAPS      &lt 1 A      &kp S  &lk 2 D         &lk 1 F   &kp G         &hm LCTRL ESC   &kp H           &lk 1 J     &lt 2 K     &kp L       &lt 1 SEMI     &lt 1 SQT
   &kp LSHFT     &hm LSHFT Z  &kp X  &kp C           &kp V     &kp B         &kp LALT        &kp N           &kp M       &kp COMMA   &kp DOT     &hm RSHFT FSLH &kp RSHFT  
   &bt BT_CLR    &kp GRAVE    &to 2  &hm LEFT RIGHT  &kp DEL   &kp BSPC      &hm LGUI SPACE  &kp SPACE       &kp ENTER   &hm UP DOWN &kp LBKT    &kp RBKT       &mo 1   
                        >;
	
			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

        nav_layer {
// ----------------------------------------------------------------------------------
// |  =      |  1         |  2        |  3          |  4         |  5        |                  |   6           |   7        |   8       |   9     |     0         |   -    |
// | to L0   |            |  LEFT     |  UP         | L0to RIGHT |           |   | OPTION    |  |   HOME        | L0to PG UP | PG DNP    |   END   |      ;        |   END   |
// | LSHIFT  |            |           |  DOWN       |            |           |   | CTRL ESC  |  |               |            |   ,       |   .     |   / RSHIFT    | RSHIFT |
// |         |            | TO 0      |             |  BSPACE    |  DELETE   |   | CMD SPACE |  |  ENTER        |    SPACE   |   UP/DOWN |         |               |        | 
//
		bindings = < 
   &kp EQUAL  &kp N1      &kp N2        &kp N3         &kp N4      &kp N5                        &kp N6          &kp N7       &kp N8      &kp N9    &kp N0         &kp MINUS
   &to 0      &none       &kp LEFT      &kp UP         &lk 0 RIGHT  &none         &hm LCTRL ESC  &kp HOME        &lk 0 PG_UP  &kp PG_DN   &kp END   &kp SEMI       &kp END
   &kp LSHFT  &kp LSHFT   &none         &kp DOWN       &none       &none          &kp LALT       &none           &none        &kp COMMA   &kp DOT   &hm RSHFT FSLH &kp RSHFT
   &none      &none       &to 0         &hm LEFT RIGHT &kp DEL    &kp BSPC        &hm LGUI SPACE &kp SPACE       &kp ENTER    &hm UP DOWN &none     &none          &none
                        >;

			sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
                };

        NumApp_layer {
// -----------------------------------------------------------------------------------------
// | LAUNCH TO DOS     |   LAUNCH CONTACTS   |   LAUNCH CALENDAR     | LAUNCH BROWSER      | LAUNCH EMAIL        |  LAUNCH TEXTING     |                |      CLR       |     7      |     8     |     9    |     -      |     รท      |
// |  L0to             |                     |             LEFT      |   L0to UP           |  L0to RIGHT         |                     | |  OPTION    | |                |  L0to 4    |  L0to 5   |     6    |     +      |     *      |
// | LSHIFT            |                     |                       |   DOWN              |                     |                     | |  CTRL ESC  | |                |     1      |     2     |     3    |     =      |            |
// |                   |                     |              L0       |                     |  BSPACE             |       DELETE        | |  CMD SPACE | |     ENTER      |    SPACE   |     0     |     .    |     =      |   BKSPC    |
//                                            
		bindings = <
   &kp LG(LS(LA(KP_N7))) &kp LG(LS(LA(KP_N2)))  &kp LG(LS(LA(KP_N1)))  &kp LG(LS(LA(KP_N4))) &kp LG(LS(LA(KP_N3))) &kp LG(LS(LA(KP_N9)))                  &kp KP_CLEAR     &kp KP_N7   &kp KP_N8   &kp KP_N9  &kp KP_MINUS  &kp KP_DIVIDE
   &to 0                 &none                &kp LEFT                 &lk 0 UP              &lk 0 RIGHT           &none                 &hm LCTRL ESC    &none            &lk 0 N4    &lk 0 N5    &kp KP_N6  &kp KP_PLUS   &kp KP_MULTIPLY
   &kp LSHFT             &none                &none                    &kp DOWN              &none                 &none                 &kp LALT         &none            &kp KP_N1   &kp KP_N2   &kp KP_N3  &kp KP_EQUAL  &none
   &none                 &none                &to 0                    &hm LEFT RIGHT        &kp DEL              &kp BSPC               &hm LGUI ENTER   &kp SPACE        &kp ENTER   &kp KP_N0   &kp KP_DOT &kp KP_EQUAL  &kp BSPC
                        >;

			sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
                };

        new_layer {
// -----------------------------------------------------------------------------------------
// |    -    |     9  |     8  |     7  |    NUM |       |           |       | NUM     |  7       |      8  |      9  |  -   |
// |   +     |     6  |     5  |     4  |     /  |       | |       | |       |      /  |       4  |      5  |      6  |   +  |
// |   =     |     3  |     2  |     1  |     *  |       | |       | |       |      *  |       1  |      2  |      3  |   =  |
// |   RET   |    .   |    0   |    0   |  CLR   |       | |       | |       |    CLR  |    0     |    0    |    .    |  RET | 
//                                            
		bindings = <
   &none     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4             &out OUT_BLE  &out OUT_USB  &none     &none     &none     &reset   
   &none     &none    &none    &none    &none     &none         &none       &none  &kp N4    &kp N5     &kp N6    &none     &none
   &none     &none    &none    &none    &none     &none         &none       &none  &kp N1    &kp N2     &kp N3    &none     &none
   &none     &none    &none    &kp LA(BSPC)&kp BSPC&kp LC(BSPC) &none       &none  &trans    &kp N0     &none     &none     &none
                        >;

			sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
                };
	};
};
